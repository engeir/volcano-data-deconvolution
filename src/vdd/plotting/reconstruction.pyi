import matplotlib as mpl
import numpy as np
import vdd.load
import volcano_base
import xarray as xr
from _typeshed import Incomplete as Incomplete
from functools import cached_property as cached_property

COLORS: Incomplete
DataCESM = vdd.load.CESMData
DecCESM = vdd.load.DeconvolveCESM
padding: Incomplete
dec_cesm_m: Incomplete
dec_ob16_month: Incomplete
all_decs: Incomplete

class ReconstructOB16:
    ob16: Incomplete
    decs: Incomplete
    def __init__(self, *decs: vdd.load.Deconvolve) -> None: ...
    def plot_temperature(self) -> None: ...

class PlotReconstruction:
    ob16: Incomplete
    normalise: Incomplete
    dec_ob16: Incomplete
    reconstruction: Incomplete
    sim_name: Incomplete
    def __init__(self, ob16: volcano_base.load.OttoBliesner, reconstruction: vdd.load.Reconstructor) -> None: ...
    @cached_property
    def temp_control(self) -> xr.DataArray: ...
    @cached_property
    def rec_temp_so2(self) -> np.ndarray: ...
    @cached_property
    def rec_temp_rf(self) -> np.ndarray: ...
    @cached_property
    def residual_so2(self) -> np.ndarray: ...
    @cached_property
    def residual_rf(self) -> np.ndarray: ...
    @property
    def peaks_time(self) -> np.ndarray: ...
    @property
    def peaks_original(self) -> np.ndarray: ...
    @property
    def peaks_so2(self) -> np.ndarray: ...
    @property
    def peaks_rf(self) -> np.ndarray: ...
    def plot_reconstruction_temp(self, ax: mpl.axes.Axes) -> mpl.axes.Axes: ...
    def correlation(self, ax: mpl.axes.Axes) -> mpl.axes.Axes: ...
    def spectrum(self, ax: mpl.axes.Axes) -> mpl.axes.Axes: ...
    def spectrum_parts(self, ax: mpl.axes.Axes) -> mpl.axes.Axes: ...
    def peak_difference_analysis(self, ax1: mpl.axes.Axes, ax2: mpl.axes.Axes) -> tuple[mpl.axes.Axes, mpl.axes.Axes]: ...

class PlotManyReconstructions:
    ob16: Incomplete
    recs: Incomplete
    def __init__(self, ob16: volcano_base.load.OttoBliesner, *recs: vdd.load.Reconstructor) -> None: ...
    def run(self) -> None: ...
